if has('vim_starting')
  set nocompatible
  set runtimepath+=~/.vim/bundle/neobundle.vim/
end

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Bundles
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype off

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc.vim', {'build': {'unix': 'make'}}

" Aesthetics
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'bling/vim-airline'

" Syntaxon
NeoBundle 'guns/vim-clojure-static'
NeoBundle 'tpope/vim-git'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'dotcloud/docker', {
  \ 'rtp': 'contrib/syntax/vim'
  \ }

" Clojure
NeoBundle 'tpope/vim-leiningen'
NeoBundle 'tpope/vim-projectionist'
NeoBundle 'tpope/vim-dispatch'
NeoBundle 'tpope/vim-fireplace'
NeoBundle 'guns/vim-sexp'
NeoBundle 'tpope/vim-sexp-mappings-for-regular-people'
NeoBundle 'kien/rainbow_parentheses.vim'
NeoBundle 'guns/vim-clojure-highlight'

" Extras
NeoBundle 'TailMinusF'
NeoBundle 'godlygeek/tabular'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'rking/ag.vim'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-surround'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'ConradIrwin/vim-bracketed-paste'

call neobundle#end()

filetype plugin indent on       " load file type plugins + indentation
NeoBundleCheck

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable

set directory=/tmp/
set encoding=utf-8
set background=dark
colorscheme jellybeans
set showcmd                     " display incomplete commands
set list
set listchars=""
set listchars+=tab:â–¸\
set listchars+=trail:Â·
set listchars+=extends:>
set listchars+=precedes:<

set wildignore+=target,*.jar,*.class,ivyrepo
set wildignore+=*.so,*.swp,*.zip,*.un~,.DS_Store,.gitkeep,*/vendor/*,.*,*/coverage/*,*.pyc

set number                         " Show numbers gutter
set numberwidth=3                  " Numbers gutter 3 cols wide
set ruler       " show the cursor position all the time
set cursorline
set scrolloff=3
set scrolljump=8
set shortmess=atI
set lazyredraw

"" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode

autocmd BufWritePre * :%s/\s\+$//e " Strip all trailing whitespace

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter
set gdefault                    " Always assume /g on substitutions

" Splits
set splitbelow
set splitright

set mouse=a " Enable mouse events (scrolling), particularly over tmux+iTerm2

if version >= 730 && has("macunix")
  " Default yank and paste go to Mac's clipboard
  set clipboard=unnamed
endif

if v:version >= 703
  set undofile
  let &undodir=&directory
endif

function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc

" nnoremap <C-n> :call NumberToggle()<cr>

autocmd FocusLost * :set number
autocmd FocusGained * :set relativenumber
autocmd InsertEnter * :set number
autocmd InsertLeave * :set relativenumber
autocmd CursorMoved * :set relativenumber

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set laststatus=2  " always show the status bar

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Extras Customization
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" vim-airline
" let g:airline_powerline_fonts=1
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline#extensions#branch#enabled=1
let g:airline#extensions#tabline#enabled=1

"" vim-clojure-static
let g:clojure_maxlines = 1000 " Search an unlimited number of lines for identation

" Remember last location in file, but not for commit messages.
" see :help last-position-jump
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
      \| exe "normal! g`\"" | endif

" Treat JSON files like JavaScript
autocmd BufRead,BufNewFile {Vagrantfile,Guardfile,Gemfile,Rakefile,Capfile,*.rake,config.ru} set filetype=ruby
autocmd BufRead,BufNewFile {COMMIT_EDITMSG}                                                  set filetype=gitcommit
autocmd BufRead,BufNewFile {*.json}                                                          set filetype=javascript
autocmd BufRead,BufNewFile {*.cljs,*.hl,*.edn,*.cljx}                                        setlocal filetype=clojure
autocmd FileType           python                                                            setlocal tabstop=8 expandtab shiftwidth=4 softtabstop=4

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keybindings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader = ","
let maplocalleader = ","

nmap <F1> <nop>

" Swap w/ mru buffer
nnoremap <leader><leader> <c-^>

" find merge conflict markers
nmap <silent> <leader>cf <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" No help please
nmap <F1> <Esc>

" easier navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

"Add some nice short cuts for tab swapping
nnoremap <silent> <C-n> :tabnext<CR>
nnoremap <silent> <C-p> :tabprevious<CR>

"Tag traversal
nnoremap <silent> <Leader>b :TagbarToggle<CR>


" Reselect visual block after indent/outdent - vimbits.com/bits/20
vnoremap < <gv
vnoremap > >gv

" For pairing
inoremap jk <Esc>
inoremap jj <Esc>

" Rename current file
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

map <leader>mv :call RenameFile()<cr>
map <leader>mk :make<cr>

command! KillWhitespace :normal :%s/ *$//g<cr><c-o><cr>
map <leader>ws :call KillWhitespace

nnoremap <leader>r :Require<CR>

" Unite!
let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts = '-line-numbers --nocolor --nogroup --smart-case'
nnoremap p :Unite -start-insert file_rec/async:!<cr>
nnoremap <leader>/ :Unite grep:.<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Writing
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Bundle 'reedes/vim-pencil'
" Bundle 'reedes/vim-lexical'
" Bundle 'reedes/vim-wheel'
" Bundle 'reedes/vim-wordy'
" Bundle 'reedes/vim-litecorrect'
" Bundle 'kana/vim-textobj-user'
" Bundle 'reedes/vim-textobj-sentence'

" let g:pencil#wrapModeDefault = 'soft'   " or 'soft'

" augroup pencil
"   autocmd!
"   autocmd FileType markdown call pencil#init()
"   " autocmd FileType text call pencil#init()
" augroup END

" augroup lexical
"   autocmd!
"   autocmd FileType markdown call lexical#init()
"   " autocmd FileType text call lexical#init({ 'spell': 0 })
" augroup END

" augroup litecorrect
"   autocmd!
"   autocmd FileType markdown call litecorrect#init()
"   " autocmd FileType text call litecorrect#init()
" augroup END

" augroup textobj_sentence
"   autocmd!
"   autocmd FileType markdown call textobj#sentence#init()
"   " autocmd FileType text call textobj#sentence#init()
" augroup END
